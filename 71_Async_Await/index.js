// Async/Await = Async = makes a function return a promise
//                            Await = makes an async function wait for a promise

//               Allows you write asynchronous code in a synchronous manner
//               Async doesn't have resolve or reject parameters
//               Everything after Await is placed in an event queue


/**
 * Async/Await = Async(kh√¥ng ƒë·ªìng b·ªô) = makes a function return a promise (L√†m m·ªôt function tr·∫£ v·ªÅ 1 promise)
 *               Await = makes an async function wait for a promise - Ch·ªù ƒë·ª£i = l√†m cho h√†m async ch·ªù m·ªôt l·ªùi h·ª©a
 * 
 * Cho ph√©p b·∫°n vi·∫øt m√£ kh√¥ng ƒë·ªìng b·ªô theo c√°ch ƒë·ªìng b·ªô Async kh√¥ng c√≥ tham s·ªë gi·∫£i quy·∫øt ho·∫∑c t·ª´ ch·ªëi M·ªçi th·ª© sau Ch·ªù ƒë·ª£i ƒë∆∞·ª£c ƒë·∫∑t trong h√†ng ƒë·ª£i s·ª± ki·ªán
*/

function doWalkDog() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const walkDog = true;
            if (walkDog) {
                resolve("You walk the dog üêï")
            } else {
                reject("You DIDN't walk the dog")
            }
        }, 1500)
    })
}

function doCleanKitchen() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const cleanKitchen = true;
            if (cleanKitchen) {
                resolve("You clean the kitchen üßπ")
            } else {
                reject("You DID NOT cleaning the kitchen")
            }
        }, 2500)
    })
}

function doTakeOutTrash() {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            const takeOutTrash = true;
            if (takeOutTrash) {
                resolve("You take out the trash ‚ôª")
            } else {
                reject("You DID NOT take out the trash")
            }
        }, 500)
    })
}

// L√†m 1 function tr·∫£ v·ªÅ 1 promise
async function doChores() {
    try {
        //   ch·ªù ƒë·ª£i l·ªùi h·ª©a
        const walkDog = await doWalkDog()
        console.log(walkDog)
        const cleanKitchen = await doCleanKitchen()
        console.log(cleanKitchen)
        const takeOutTrash = await doTakeOutTrash()
        console.log(takeOutTrash)
        console.log("You finsihed all the chores!");
    } catch (error) {
        console.error(error)
    }

}

doChores()