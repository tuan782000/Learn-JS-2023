// NodeList = Static collection of HTML elements by (id, class, element)
//                     Can be created by using querySelectorAll()
//                     Similar to an array, but no (map, filter, reduce) 
//                     NodeList won't update to automatically reflect changes


/*
NodeList = - T·∫≠p h·ª£p c√°c ph·∫ßn t·ª≠ HTML theo (id, class, element).
           - C√≥ th·ªÉ t·∫°o b·∫±ng c√°ch s·ª≠ d·ª•ng querySelectorAll().
           - T∆∞∆°ng t·ª± nh∆∞ m·∫£ng, nh∆∞ng kh√¥ng c√≥ (map, filter, reduce).
           - NodeList s·∫Ω kh√¥ng c·∫≠p nh·∫≠t ƒë·ªÉ t·ª± ƒë·ªông ph·∫£n √°nh c√°c thay ƒë·ªïi.
*/

// NodeList
// 2 c√°ch n√†y t∆∞∆°ng t·ª± nhau, ƒë·ªÅu d·ª±a v√† ƒëi·ªÉm chung (id hay class hay element) c·ªßa th√†nh ph·∫ßn ƒë√≥ m√† ch·ªçn ra
// const buttons = document.querySelectorAll('button') // d·ª±a v√†o ƒëi·ªÉm chung l√† element
let buttons = document.querySelectorAll('.myButtons') // d·ª±a v√†o ƒëi·ªÉm chung l√† class

console.log(buttons) // ch√∫ √Ω: NodeList - n√≥ t∆∞∆°ng t·ª± nh∆∞ 1 Array

// Tuy kh√¥ng h·ªó tr·ª£ c√°c map hay filter hay reduce, nh∆∞ng d√πng ƒë∆∞·ª£c v√≤ng l·∫∑p,
buttons.forEach(button => {
    // ch√∫ng ta c√≥ th·ªÉ th·ª±c hi·ªán ghi ƒë√® ho·∫∑c th√™m b·ªõt n·ªôi dung c·ªßa th·∫ª ho·∫∑c ƒë·ªïi css cho th·∫ª,...
    button.style.backgroundColor = "green"
    button.textContent += "üòÅ"
});

// Click events listener
buttons.forEach(button => {
    button.addEventListener('click', (e) => {
        console.log(e)
        e.target.style.backgroundColor = "tomato"
    })
})

// MouseOver v√† MouseOut
buttons.forEach(button => {
    button.addEventListener("mouseover", e => {
        e.target.style.backgroundColor = "hsl(205, 100%, 50%)"
    })
})


buttons.forEach(button => {
    button.addEventListener("mouseout", e => {
        e.target.style.backgroundColor = "green"
    })
})

// Add an element - Th√™m 1 th·∫ª

// Step 1: T·∫°o 1 th·∫ª button th√™m n√≥ v√†o bi·∫øn
const newElement = document.createElement("button")
// Step 2: Th√™m n·ªôi dung cho th·∫ª button v·ª´a m·ªõi t·∫°o
// C√≥ th·ªÉ th√™m class ho·∫∑c id ho·∫∑c b·∫•t c·ª© c√°i g√¨ cho th·∫ª...
newElement.textContent = "Button 5"
newElement.classList = "myButtons"
// Step 3: ƒê∆∞a n√≥ l√™n m√†n h√¨nh ch√≠nh, th√¨ ph·∫£i th√™m n√≥ v√†o body
document.body.appendChild(newElement)

console.log(buttons) // n√≥ s·∫Ω kh√¥ng c√≥ th·∫±ng newElement m·ªõi t·∫°o v√¨ t√≠nh ch·∫•t - NodeList s·∫Ω kh√¥ng c·∫≠p nh·∫≠t ƒë·ªÉ t·ª± ƒë·ªông ph·∫£n √°nh c√°c thay ƒë·ªïi.

// ƒê·ªÉ kh·∫Øc ph·ª•c ƒëi·ªÅu n√†y th√¨ ch√∫ng ta s·∫Ω ph·∫£i ƒë·ªïi buttons t·ª´ const th√†nh let.
// Sau ƒë√≥ ch√∫ng ta s·∫Ω th·ª±c hi·ªán g√°n l·∫°i v√†o bi·∫øn buttons

buttons = document.querySelectorAll('.myButtons')

console.log(buttons) // l√∫c n√†y buttons m·ªõi ƒë∆∞·ª£c c·∫≠p nh·∫≠t l·∫°i

// Remove an element - X√≥a 1 th·∫ª
buttons.forEach(button => {
    button.addEventListener("click", (e) => {
        e.target.remove()
        console.log(buttons) // nh∆∞ th·∫ø n√†y th√¨ nodeList v·∫´n ch∆∞a c·∫≠p nh·∫≠t
        // ƒë·ªÉ c·∫≠p nh·∫≠t th√¨ ƒë·∫£m b·∫£o bi·∫øn ƒë√≥ ph·∫£i l√† "let" v√† c√°i th·ª© 2 l√† ph·∫£i c·∫≠p nh·∫≠t l·∫°i b·∫±ng querySellectorAll
        buttons = document.querySelectorAll('.myButtons')
        console.log(buttons) // l√∫c n√†y ƒë√£ c·∫≠p nh·∫≠t
    })
})


